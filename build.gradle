plugins {
    id 'java'
    id 'application'
}

group 'com.ddf.fakeplayer'
version '0.4.0-Beta'

repositories {
    maven {
        name 'aliyun-central'
        url 'https://maven.aliyun.com/repository/central'
    }
    maven {
        name 'aliyun-public'
        url 'https://maven.aliyun.com/repository/public'
    }
    maven {
        name 'nukkitx-repo-release'
        url 'https://repo.nukkitx.com/maven-releases/'
    }
    maven {
        name 'nukkitx-repo-snapshot'
        url 'https://repo.nukkitx.com/maven-snapshots/'
    }
}

dependencies {
    implementation 'com.nukkitx.protocol:bedrock-v448:2.8.1-SNAPSHOT'
    implementation 'com.google.code.gson:gson:2.8.7'
    implementation 'org.yaml:snakeyaml:1.29'
    implementation 'com.formdev:flatlaf:1.5'
    implementation 'org.java-websocket:Java-WebSocket:1.5.2'
    implementation 'org.slf4j:slf4j-nop:1.7.32'
    implementation 'com.miglayout:miglayout-swing:5.3'
    implementation 'org.mozilla:rhino:1.7.13'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
mainClassName = 'com.ddf.fakeplayer.Main'

distributions {
    main {
        contents {
            from "LICENSE"
            into ""
        }
    }
}

run {
    standardInput = System.in
    jvmArgs += '-Dfakeplayer.nogui=true'
}

task generateVersionInfo {
    def versionRegex = '\\$\\{VERSION\\}'
    def templateFile = new File(projectDir, "src/main/java/com/ddf/fakeplayer/VersionInfo.java.template")
    def text = templateFile.text
    text = (text =~ /${versionRegex}/).replaceAll(version.toString())
    def file = new File(projectDir, "src/main/java/com/ddf/fakeplayer/VersionInfo.java")
    file.createNewFile()
    file.write(text)
}

compileJava.dependsOn(generateVersionInfo)
compileTestJava.dependsOn(generateVersionInfo)

task runGUI(type: JavaExec) {
    classpath = run.classpath
    main = run.main
    jvmArgs += '-Dfakeplayer.nogui=false'
}

startScripts {
    defaultJvmOpts = ['-Dfakeplayer.nogui=true']
}

task guiStartScripts(type: CreateStartScripts) {
    applicationName = startScripts.applicationName + '-GUI'
    classpath = startScripts.classpath
    mainClassName = startScripts.mainClassName
    outputDir = startScripts.outputDir
    defaultJvmOpts = ['-Dfakeplayer.nogui=false']
    doLast {
        def windowsScriptText = windowsScript.text.replaceAll('java\\.exe', 'javaw.exe')
        windowsScriptText = windowsScriptText.replaceAll('"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS%', 'start "" /B "%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS%')
        windowsScript.write(windowsScriptText)
    }
}

startScripts.dependsOn(guiStartScripts)